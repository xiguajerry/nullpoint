package me.nullpoint.mod.modules.impl.exploit;

import me.nullpoint.api.utils.entity.MovementUtil;
import me.nullpoint.mod.modules.Module;
import me.nullpoint.mod.modules.settings.impl.SliderSetting;
import net.minecraft.network.packet.c2s.play.PlayerMoveC2SPacket;
import net.minecraft.util.math.MathHelper;

public class Clip extends Module {
   public static Clip INSTANCE;
   private final SliderSetting delay = this.add(new SliderSetting("delay", 5, 1, 10));
   private int packets;

   public Clip() {
      super("Clip", "Clips into blocks nearby to prevent crystal damage", Module.Category.Exploit);
      INSTANCE = this;
   }

   public void onDisable() {
      this.packets = 0;
   }

   public String getInfo() {
      return String.valueOf(this.packets);
   }

   public void onUpdate() {
      if (MovementUtil.isMoving()) {
         this.packets = 0;
      } else {
         if ((double)mc.player.age % this.delay.getValue() == 0.0) {
            mc.player.setPosition(mc.player.getX() + MathHelper.clamp(this.roundToClosest(mc.player.getX(), Math.floor(mc.player.getX()) + 0.241, Math.floor(mc.player.getX()) + 0.759) - mc.player.getX(), -0.03, 0.03), mc.player.getY(), mc.player.getZ() + MathHelper.clamp(this.roundToClosest(mc.player.getZ(), Math.floor(mc.player.getZ()) + 0.241, Math.floor(mc.player.getZ()) + 0.759) - mc.player.getZ(), -0.03, 0.03));
            mc.player.networkHandler.sendPacket(new PlayerMoveC2SPacket.PositionAndOnGround(mc.player.getX(), mc.player.getY(), mc.player.getZ(), true));
            mc.player.networkHandler.sendPacket(new PlayerMoveC2SPacket.PositionAndOnGround(this.roundToClosest(mc.player.getX(), Math.floor(mc.player.getX()) + 0.23, Math.floor(mc.player.getX()) + 0.77), mc.player.getY(), this.roundToClosest(mc.player.getZ(), Math.floor(mc.player.getZ()) + 0.23, Math.floor(mc.player.getZ()) + 0.77), true));
            ++this.packets;
         }

      }
   }

   private double roundToClosest(double num, double low, double high) {
      double d1 = num - low;
      double d2 = high - num;
      return d2 > d1 ? low : high;
   }
}
