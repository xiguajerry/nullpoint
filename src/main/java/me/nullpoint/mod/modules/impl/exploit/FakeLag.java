// Decompiled with: Procyon 0.6.0
// Class Version: 17
package me.nullpoint.mod.modules.impl.exploit;

import net.minecraft.network.listener.PacketListener;
import me.nullpoint.api.utils.Wrapper;
import me.nullpoint.api.utils.math.Timer;
import java.util.Iterator;
import me.nullpoint.api.utils.render.Render3DUtil;
import me.nullpoint.asm.accessors.IEntity;
import java.awt.Color;
import net.minecraft.client.util.math.MatrixStack;
import me.nullpoint.api.events.impl.UpdateWalkingEvent;
import me.nullpoint.api.events.eventbus.EventHandler;
import net.minecraft.entity.Entity;
import net.minecraft.network.packet.Packet;
import net.minecraft.world.World;
import net.minecraft.network.packet.s2c.play.EntityS2CPacket;
import net.minecraft.network.packet.s2c.common.KeepAliveS2CPacket;
import net.minecraft.network.packet.s2c.common.CommonPingS2CPacket;
import me.nullpoint.api.events.impl.PacketEvent;
import java.util.concurrent.CopyOnWriteArrayList;
import me.nullpoint.mod.modules.settings.impl.BooleanSetting;
import me.nullpoint.mod.modules.settings.impl.SliderSetting;
import net.minecraft.util.math.Vec3d;
import net.minecraft.entity.player.PlayerEntity;
import java.util.HashMap;
import me.nullpoint.mod.modules.Module;

public class FakeLag extends Module
{
   private static final HashMap<PlayerEntity, Vec3d> map;
   private final SliderSetting spoof;
   private final BooleanSetting ping;
   private final BooleanSetting entity;
   private final CopyOnWriteArrayList<CustomPacket> packet;

   public FakeLag() {
      super("FakeLag", Category.Exploit);
      this.spoof = this.add(new SliderSetting("Spoof", 500.0, 0.0, 5000.0, 1.0));
      this.ping = this.add(new BooleanSetting("Ping", true));
      this.entity = this.add(new BooleanSetting("Entity", true));
      this.packet = new CopyOnWriteArrayList<CustomPacket>();
   }

   @EventHandler
   public void onPacketReceive(final PacketEvent.Receive event) {
      if (nullCheck()) {
         return;
      }
      if (this.ping.getValue() && (event.getPacket() instanceof CommonPingS2CPacket || event.getPacket() instanceof KeepAliveS2CPacket)) {
         this.packet.add(new CustomPacket(event.getPacket()));
         event.cancel();
         return;
      }
      final EntityS2CPacket packet = (EntityS2CPacket) event.getPacket();
      if (packet instanceof EntityS2CPacket) {
         final EntityS2CPacket entityS2CPacket = packet;
         final Entity entity = entityS2CPacket.getEntity(FakeLag.mc.world);
         if (entity instanceof final PlayerEntity player) {
            if (player == FakeLag.mc.player) {
               return;
            }
            if (FakeLag.map.containsKey(player) && this.entity.getValue() && FakeLag.map.get(player).distanceTo(FakeLag.mc.player.getPos()) < new Vec3d(entityS2CPacket.getDeltaX(), entityS2CPacket.getDeltaY(), entityS2CPacket.getDeltaZ()).distanceTo(FakeLag.mc.player.getPos())) {
               this.packet.add(new CustomPacket(entityS2CPacket));
               event.cancel();
            }
            FakeLag.map.put(player, player.getPos());
         }
      }
   }

   @Override
   public void onUpdate() {
      this.update();
   }

   @EventHandler
   public void onUpdateWalking(final UpdateWalkingEvent event) {
      this.update();
   }

   @Override
   public void onRender3D(final MatrixStack matrixStack, final float partialTicks) {
      this.update();
      if (this.entity.getValue()) {
         for (final Vec3d vec3d : FakeLag.map.values()) {
            final Color color = new Color(255, 255, 255, 100);
            Render3DUtil.draw3DBox(matrixStack, ((IEntity)FakeLag.mc.player).getDimensions().getBoxAt(vec3d).expand(0.0, 0.1, 0.0), color, false, true);
         }
      }
   }

   @Override
   public void onDisable() {
      if (nullCheck()) {
         this.packet.clear();
         return;
      }
      for (final CustomPacket p : this.packet) {
         p.apply();
      }
   }

   private void update() {
      if (nullCheck()) {
         this.packet.clear();
         return;
      }
      this.packet.removeIf(CustomPacket::send);
   }

   static {
      map = new HashMap<PlayerEntity, Vec3d>();
   }

   private class CustomPacket
   {
      Packet pp;
      final Timer timer;
      final int delay;

      public CustomPacket(final Packet p) {
         this.pp = p;
         this.timer = new Timer();
         this.delay = FakeLag.this.spoof.getValueInt();
      }

      public boolean send() {
         if (this.timer.passedMs(this.delay)) {
            this.apply();
            return true;
         }
         return false;
      }

      public void apply() {
         if (this.pp != null) {
            this.pp.apply(Wrapper.mc.player.networkHandler);
         }
      }
   }
}
