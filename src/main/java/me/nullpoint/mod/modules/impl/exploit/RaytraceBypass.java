package me.nullpoint.mod.modules.impl.exploit;

import me.nullpoint.api.events.eventbus.EventHandler;
import me.nullpoint.api.utils.math.Timer;
import me.nullpoint.asm.mixins.AccessorPlayerMoveC2SPacket;
import me.nullpoint.mod.modules.Module;
import me.nullpoint.mod.modules.settings.impl.BooleanSetting;
import me.nullpoint.mod.modules.settings.impl.EnumSetting;
import me.nullpoint.mod.modules.settings.impl.SliderSetting;
import net.minecraft.network.packet.Packet;
import net.minecraft.network.packet.c2s.play.PlayerInteractBlockC2SPacket;
import net.minecraft.network.packet.c2s.play.PlayerMoveC2SPacket;

public class RaytraceBypass extends Module {
   public static RaytraceBypass INSTANCE;
   private final BooleanSetting Always = this.add(new BooleanSetting("Always", true));
   private final EnumSetting mode;
   private final SliderSetting Keep;
   private final SliderSetting Delay;
   private final SliderSetting offset;
   private final Timer timer;
   private float pitch;

   public RaytraceBypass() {
      super("RaytraceBypass", Module.Category.Exploit);
      this.mode = this.add(new EnumSetting("RaytraceMod", RaytraceBypass.Mode.Motion));
      this.Keep = this.add(new SliderSetting("Keep", 2.0, 0.0, 10.0));
      this.Delay = this.add(new SliderSetting("Delay", 250, 0, 1000));
      this.offset = this.add(new SliderSetting("Offset", 15.0, 0.0, 40.0));
      this.timer = new Timer();
      this.pitch = -91.0F;
      INSTANCE = this;
   }

   @EventHandler
   public void onPacketSend(Packet packet) {
      switch ((Mode)this.mode.getValue()) {
         case Packet:
            if (packet instanceof PlayerInteractBlockC2SPacket && this.timer.passedMs(this.Delay.getValue()) && mc.player != null && mc.world != null && mc.world.isSpaceEmpty(mc.player.getBoundingBox().stretch(0.0 + this.Keep.getValue(), 0.0 + this.offset.getValue(), 0.0 + this.Keep.getValue()))) {
               this.pitch = -75.0F;
               this.timer.reset();
            }
            break;
         case Motion:
            if (packet instanceof PlayerMoveC2SPacket movePacket) {
               if (this.pitch != -91.0F) {
                  if (this.Always.getValue()) {
                     ((AccessorPlayerMoveC2SPacket)movePacket).setPitch(this.pitch);
                  }

                  ((AccessorPlayerMoveC2SPacket)movePacket).setPitch(this.pitch);
                  this.pitch = -91.0F;
               }
            }
            break;
         case Client:
            if (packet instanceof PlayerInteractBlockC2SPacket && this.timer.passedMs(this.Delay.getValue()) && mc.player != null && mc.world != null && mc.world.isSpaceEmpty(mc.player.getBoundingBox().stretch(0.0 + this.Keep.getValue(), 0.0 + this.offset.getValue(), 0.0 + this.Keep.getValue()))) {
               this.pitch = -75.0F;
               this.timer.reset();
            }
      }

   }

   public enum Mode {
      Packet,
      Client,
      Motion;

      // $FF: synthetic method
      private static Mode[] $values() {
         return new Mode[]{Packet, Client, Motion};
      }
   }
}
